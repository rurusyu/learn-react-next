구조잡는게 힘든데,
주제별로 만들면 좋다.
state 구조잡는거는 경험이 많아야함..

하나로 만들면 너무 커짐.. 그래서 쪼개는데.
쪼갤떄는 항상 전체를 감싸는 Root 리듀서가 있어야함..

 ...state, 이런 연산자 사용하는게 나중가면 복잡해지는 경우가 많아서 immutable.js를 사용한다고 함.

스토어는 하나만 존재하며, 컴포넌트가 모이는 곳에다가 리액트와 리덕스를  연결시켜주면, 모든 컴포넌트가 리덕스안의 state를 공유하게됨.
app.js가 가장 root였는데, Provider를 가장 밖에 사용함으로써  root 컴포넌트가 된다. store= state + action + reducer

넥스트에서 리덕스는 npm i next-redux-wrapper를 설치해줘야한다. => app.js에서 store를 props로 받는데, 스토어를 넣어줄 부분이 구현이 안되서
그부분을 next-redux-wrapperr 가 대신해줌.