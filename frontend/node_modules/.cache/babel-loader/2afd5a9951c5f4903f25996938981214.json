{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\Documents\\\\GitHub\\\\react-nodebird\\\\frontend\\\\pages\\\\_app.js\";\n//자동으로 이 컴포넌트를 부모컴포넌트로 사용한다. 페이지별 공통된 부분 이걸로 뺐음. 그래야 리랜더링 잡을 수 있음.\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport withRedux from 'next-redux-wrapper'; //아래 store를 props로 받아야하는 부분을 처리해주기 위해서 설치함.\n\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport AppLayout from \"../components/AppLayout\";\nimport rootReducer from '../reducers'; //컴포넌트가 모이는 곳에다가 리액트와 리덕스를  연결시켜주면, 모든 컴포넌트가 리덕스안의 state를 공유하게됨.\n//app.js가 가장 root였는데, Provider를 가장 밖에 사용함으로써  root 컴포넌트가 된다. store= state + action + reducer\n\nimport { Provider } from 'react-redux';\n\nvar NodeBird = function NodeBird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store;\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"\\uB178\\uB4DC\\uBC84\\uB4DC\"), React.createElement(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(\"script\", {\n    src: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })), React.createElement(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Component, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })));\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType,\n  store: PropTypes.object\n};\nexport default withRedux(function (initialState, options) {\n  //이건 외우면 됨. 똑같음.\n  //여기는 스토어 커스텀할수있음. 리덕스 devtool쓰려면 미들웨어 해주어야함(리덕스에 없는 기능쓰려면)\n  var middlewares = [];\n  var enhancer = compose(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(rootReducer, initialState, enhancer); //rootReducer 넣어줌.\n\n  return store; //여기서 리턴해주면 위에서 props로 받을 수있음.\n})(NodeBird); //HOC, 기능확장해줌.","map":{"version":3,"sources":["C:\\Users\\nathan\\Documents\\GitHub\\react-nodebird\\frontend\\pages\\_app.js"],"names":["React","Head","PropTypes","withRedux","createStore","compose","applyMiddleware","AppLayout","rootReducer","Provider","NodeBird","Component","store","propTypes","elementType","object","initialState","options","middlewares","enhancer"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CAA4C;;AAC5C,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,WAAP,MAAwB,aAAxB,C,CAEA;AACA;;AACA,SAAQC,QAAR,QAAuB,aAAvB;;AAEA,IAAMC,QAAQ,GAAE,SAAVA,QAAU,OAAsB;AAAA,MAApBC,SAAoB,QAApBA,SAAoB;AAAA,MAATC,KAAS,QAATA,KAAS;AAClC,SACG,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAIA,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADH,EAEG;AAAM,IAAA,GAAG,EAAE,YAAX;AAAwB,IAAA,IAAI,EAAC,6DAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,EAGG;AAAQ,IAAA,GAAG,EAAE,4DAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHH,CADF,EAMC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAND,CADH;AAYH,CAbD;;AAeAF,QAAQ,CAACG,SAAT,GAAoB;AAChBF,EAAAA,SAAS,EAAGT,SAAS,CAACY,WADN;AAEhBF,EAAAA,KAAK,EAAGV,SAAS,CAACa;AAFF,CAApB;AAKA,eAAeZ,SAAS,CAAC,UAACa,YAAD,EAAeC,OAAf,EAAyB;AAAE;AAChD;AACA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GAAGd,OAAO,CAACC,eAAe,MAAf,SAAmBY,WAAnB,CAAD,CAAxB;AACA,MAAMN,KAAK,GAAGR,WAAW,CAACI,WAAD,EAAcQ,YAAd,EAA2BG,QAA3B,CAAzB,CAJ8C,CAIiB;;AAE/D,SAAOP,KAAP,CAN8C,CAMhC;AACjB,CAPuB,CAAT,CAOZF,QAPY,CAAf,C,CAOc","sourcesContent":["//자동으로 이 컴포넌트를 부모컴포넌트로 사용한다. 페이지별 공통된 부분 이걸로 뺐음. 그래야 리랜더링 잡을 수 있음.\r\nimport React from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\nimport withRedux from 'next-redux-wrapper'; //아래 store를 props로 받아야하는 부분을 처리해주기 위해서 설치함.\r\nimport {createStore, compose, applyMiddleware} from 'redux';\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport rootReducer from '../reducers';\r\n\r\n//컴포넌트가 모이는 곳에다가 리액트와 리덕스를  연결시켜주면, 모든 컴포넌트가 리덕스안의 state를 공유하게됨.\r\n//app.js가 가장 root였는데, Provider를 가장 밖에 사용함으로써  root 컴포넌트가 된다. store= state + action + reducer\r\nimport {Provider} from 'react-redux';\r\n\r\nconst NodeBird =({Component, store})=>{\r\n    return (\r\n       <Provider store = {store}>\r\n         <Head>\r\n            <title>노드버드</title>     \r\n            <link rel =\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.css\" />\r\n            <script src =\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.16.2/antd.js\" />\r\n        </Head>   \r\n        <AppLayout>\r\n           <Component />\r\n        </AppLayout>\r\n       </Provider>       \r\n    )\r\n}\r\n\r\nNodeBird.propTypes ={\r\n    Component : PropTypes.elementType,\r\n    store : PropTypes.object,\r\n}\r\n\r\nexport default withRedux((initialState, options)=>{ //이건 외우면 됨. 똑같음.\r\n    //여기는 스토어 커스텀할수있음. 리덕스 devtool쓰려면 미들웨어 해주어야함(리덕스에 없는 기능쓰려면)\r\n    const middlewares = [];\r\n    const enhancer = compose(applyMiddleware(...middlewares));\r\n    const store = createStore(rootReducer, initialState,enhancer); //rootReducer 넣어줌.\r\n\r\n    return store; //여기서 리턴해주면 위에서 props로 받을 수있음.\r\n})(NodeBird); //HOC, 기능확장해줌."]},"metadata":{},"sourceType":"module"}